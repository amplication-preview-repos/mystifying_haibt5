/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileMetaDataService } from "../fileMetaData.service";
import { FileMetaDataCreateInput } from "./FileMetaDataCreateInput";
import { FileMetaData } from "./FileMetaData";
import { FileMetaDataFindManyArgs } from "./FileMetaDataFindManyArgs";
import { FileMetaDataWhereUniqueInput } from "./FileMetaDataWhereUniqueInput";
import { FileMetaDataUpdateInput } from "./FileMetaDataUpdateInput";

export class FileMetaDataControllerBase {
  constructor(protected readonly service: FileMetaDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FileMetaData })
  async createFileMetaData(
    @common.Body() data: FileMetaDataCreateInput
  ): Promise<FileMetaData> {
    return await this.service.createFileMetaData({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        tags: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FileMetaData] })
  @ApiNestedQuery(FileMetaDataFindManyArgs)
  async fileMetaDataItems(
    @common.Req() request: Request
  ): Promise<FileMetaData[]> {
    const args = plainToClass(FileMetaDataFindManyArgs, request.query);
    return this.service.fileMetaDataItems({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        tags: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FileMetaData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fileMetaData(
    @common.Param() params: FileMetaDataWhereUniqueInput
  ): Promise<FileMetaData | null> {
    const result = await this.service.fileMetaData({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        tags: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FileMetaData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFileMetaData(
    @common.Param() params: FileMetaDataWhereUniqueInput,
    @common.Body() data: FileMetaDataUpdateInput
  ): Promise<FileMetaData | null> {
    try {
      return await this.service.updateFileMetaData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          tags: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FileMetaData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFileMetaData(
    @common.Param() params: FileMetaDataWhereUniqueInput
  ): Promise<FileMetaData | null> {
    try {
      return await this.service.deleteFileMetaData({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          tags: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
