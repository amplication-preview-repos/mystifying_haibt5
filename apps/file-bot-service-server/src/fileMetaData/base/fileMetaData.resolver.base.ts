/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FileMetaData } from "./FileMetaData";
import { FileMetaDataCountArgs } from "./FileMetaDataCountArgs";
import { FileMetaDataFindManyArgs } from "./FileMetaDataFindManyArgs";
import { FileMetaDataFindUniqueArgs } from "./FileMetaDataFindUniqueArgs";
import { CreateFileMetaDataArgs } from "./CreateFileMetaDataArgs";
import { UpdateFileMetaDataArgs } from "./UpdateFileMetaDataArgs";
import { DeleteFileMetaDataArgs } from "./DeleteFileMetaDataArgs";
import { FileMetaDataService } from "../fileMetaData.service";
@graphql.Resolver(() => FileMetaData)
export class FileMetaDataResolverBase {
  constructor(protected readonly service: FileMetaDataService) {}

  async _fileMetaDataItemsMeta(
    @graphql.Args() args: FileMetaDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FileMetaData])
  async fileMetaDataItems(
    @graphql.Args() args: FileMetaDataFindManyArgs
  ): Promise<FileMetaData[]> {
    return this.service.fileMetaDataItems(args);
  }

  @graphql.Query(() => FileMetaData, { nullable: true })
  async fileMetaData(
    @graphql.Args() args: FileMetaDataFindUniqueArgs
  ): Promise<FileMetaData | null> {
    const result = await this.service.fileMetaData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FileMetaData)
  async createFileMetaData(
    @graphql.Args() args: CreateFileMetaDataArgs
  ): Promise<FileMetaData> {
    return await this.service.createFileMetaData({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FileMetaData)
  async updateFileMetaData(
    @graphql.Args() args: UpdateFileMetaDataArgs
  ): Promise<FileMetaData | null> {
    try {
      return await this.service.updateFileMetaData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FileMetaData)
  async deleteFileMetaData(
    @graphql.Args() args: DeleteFileMetaDataArgs
  ): Promise<FileMetaData | null> {
    try {
      return await this.service.deleteFileMetaData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
