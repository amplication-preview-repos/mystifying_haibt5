/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FileMetaData as PrismaFileMetaData } from "@prisma/client";

export class FileMetaDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FileMetaDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fileMetaData.count(args);
  }

  async fileMetaDataItems(
    args: Prisma.FileMetaDataFindManyArgs
  ): Promise<PrismaFileMetaData[]> {
    return this.prisma.fileMetaData.findMany(args);
  }
  async fileMetaData(
    args: Prisma.FileMetaDataFindUniqueArgs
  ): Promise<PrismaFileMetaData | null> {
    return this.prisma.fileMetaData.findUnique(args);
  }
  async createFileMetaData(
    args: Prisma.FileMetaDataCreateArgs
  ): Promise<PrismaFileMetaData> {
    return this.prisma.fileMetaData.create(args);
  }
  async updateFileMetaData(
    args: Prisma.FileMetaDataUpdateArgs
  ): Promise<PrismaFileMetaData> {
    return this.prisma.fileMetaData.update(args);
  }
  async deleteFileMetaData(
    args: Prisma.FileMetaDataDeleteArgs
  ): Promise<PrismaFileMetaData> {
    return this.prisma.fileMetaData.delete(args);
  }
}
